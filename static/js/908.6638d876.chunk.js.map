{"version":3,"file":"static/js/908.6638d876.chunk.js","mappings":"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","sources":["pages/LoginPage/AuthPage.styled.jsx","components/RegisterForm/FirstStep.jsx","components/RegisterForm/SecondStep.jsx","components/RegisterForm/StepSwitcher.jsx","components/RegisterForm/RegisterForm.jsx","pages/RegisterPage/RegisterPage.jsx","schemas/authValidationSchemas.js"],"sourcesContent":["import styled from 'styled-components';\nimport { up } from 'styled-breakpoints';\nimport {\n  authBackgroundDesktop,\n  authBackgroundTablet,\n  authBackgroundMobile,\n} from '../../images';\n\nexport const BackgroundWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  width: 97vw;\n  height: 87.8vh;\n  background-color: ${prop => prop.theme.colors.background};\n  background-origin: border-box;\n  background-size: contain;\n  background-repeat: no-repeat;\n  background-position: bottom;\n  background-image: url('${authBackgroundMobile}');\n  ${up('mobileSizeM')} {\n    background-image: url('${authBackgroundTablet}');\n  }\n  ${up('pc')} {\n    background-image: url('${authBackgroundDesktop}');\n  }\n`;\n","import { Field, ErrorMessage } from 'formik';\n\nexport const FirstStep = () => {\n  return (\n    <>\n      <label>\n        <Field\n          autoComplete=\"on\"\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Email\"\n        ></Field>\n        <ErrorMessage name=\"email\" component=\"span\"></ErrorMessage>\n      </label>\n      <label>\n        <Field\n          autoComplete=\"off\"\n          type=\"password\"\n          name=\"password\"\n          placeholder=\"Password\"\n        ></Field>\n        <ErrorMessage name=\"password\" component=\"span\"></ErrorMessage>\n      </label>\n      <label>\n        <Field\n          autoComplete=\"off\"\n          type=\"password\"\n          name=\"confirmPassword\"\n          placeholder=\"Confirm Password\"\n        ></Field>\n        <ErrorMessage name=\"confirmPassword\" component=\"span\"></ErrorMessage>\n      </label>\n    </>\n  );\n};\n","import { Field, ErrorMessage } from 'formik';\n\nexport const SecondStep = () => {\n  return (\n    <>\n      <label>\n        <Field\n          autoComplete=\"on\"\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Name\"\n        ></Field>\n        <ErrorMessage name=\"name\" component=\"span\"></ErrorMessage>\n      </label>\n      <label>\n        <Field\n          autoComplete=\"on\"\n          type=\"text\"\n          name=\"location\"\n          placeholder=\"City, region\"\n        ></Field>\n        <ErrorMessage name=\"location\" component=\"span\"></ErrorMessage>\n      </label>\n      <label>\n        <Field\n          autoComplete=\"on\"\n          type=\"text\"\n          name=\"phone\"\n          placeholder=\"Mobile phone\"\n        ></Field>\n        <ErrorMessage name=\"phone\" component=\"span\"></ErrorMessage>\n      </label>\n    </>\n  );\n};\n","import { FirstStep } from './FirstStep';\nimport { SecondStep } from './SecondStep';\n\n\nexport const StepSwitcher = ({page}) => {\n    return page === 0 ? (\n      <FirstStep />\n    ) : (\n      <SecondStep />\n    );\n  };","import { useState } from 'react';\nimport { Formik, Form } from 'formik';\nimport { Link } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\n\nimport { StepSwitcher } from './StepSwitcher';\nimport { registerSchema } from '../../schemas/authValidationSchemas';\nimport { register, login } from 'redux/auth/authOperations';\n\nexport const RegisterForm = () => {\n  const [page, setPage] = useState(0);\n\n  const dispatch = useDispatch();\n\n  const initialValues = {\n    email: '',\n    password: '',\n    confirmPassword: '',\n    name: '',\n    location: '',\n    phone: '',\n  };\n\n  const handleSubmit = (values, { resetForm }) => {\n    const newUser = {\n      email: values.email,\n      password: values.password,\n      name: values.name,\n      location: values.location,\n      phone: values.phone,\n    };\n    console.log(newUser);\n    const data = dispatch(register(newUser));\n    if (data.type === 'auth/register/fulfilled') {\n      dispatch(login({ email: values.email, password: values.password }));\n      resetForm();\n      setPage(0);\n    }\n    if (!data.payload) {\n      console.log('Something wrong, please try again later');\n    }\n  };\n\n  const handleClick = () => {\n    page === 0 ? setPage(page + 1) : setPage(page - 1);\n  };\n\n  return (\n    <div>\n      <h2>Registration</h2>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={registerSchema}\n        onSubmit={handleSubmit}\n      >\n        <Form>\n          {<StepSwitcher page={page} />}\n          <div>\n            <button type=\"button\" onClick={handleClick}>\n              {page === 0 ? 'Next' : 'Back'}\n            </button>\n            {page === 1 && <button type=\"submit\">Register</button>}\n            <p>\n              Already have an account? <Link to=\"/login\">Login</Link>\n            </p>\n          </div>\n        </Form>\n      </Formik>\n    </div>\n  );\n};\n","import { RegisterForm } from 'components/RegisterForm/RegisterForm';\nimport { BackgroundWrapper } from '../LoginPage/AuthPage.styled';\n\nconst RegisterPage = () => {\n  return (\n    <>\n      <BackgroundWrapper></BackgroundWrapper>\n      <RegisterForm />\n    </>\n  );\n};\n\nexport default RegisterPage;\n","import * as yup from 'yup';\n\n\nconst emailRegexp = /^([a-zA-Z0-9_.]+){1}([a-zA-Z0-9_\\-.]+){1}@([a-zA-Z0-9_\\-.]+)\\.([a-zA-Z]{2,3})$/ ;\nconst passwordRegexp = /^\\S*$/;\nconst nameRegexp = /^([a-zA-Zа-яА-ЯёЁ\\s]+)$/;\nconst phoneRegexp = /^\\+380\\d{3}\\d{2}\\d{2}\\d{2}$/;\nconst locationRegexp =\n  /^(?:(?:\\w+-\\w+)+|(?:\\w+)+),\\s(?:(?:\\w+-\\w+)+|(?:\\w+)+)$/;\n\nexport const registerSchema = yup.object().shape({\n  email: yup\n    .string()\n    .matches(emailRegexp, 'Email must be in format mail@mail.com')\n    .min(10, 'Email should be 10 characters minimum.')\n    .max(63, 'Email should be 63 characters maximum.')\n    .required('Email is required'),\n  password: yup\n    .string()\n    .required('Password is required')\n    .min(7, 'Password should be 7 characters minimum.')\n    .max(32, 'Password should be 32 characters maximum.')\n    .matches(passwordRegexp, 'Whitespace is not allowed'),\n  confirmPassword: yup\n    .string()\n    .oneOf([yup.ref('password'), null], 'Password must match')\n    .required('Confirm password is required'),\n  name: yup.string().matches(nameRegexp, 'Name must contain only letters'),\n  location: yup\n    .string()\n    .matches(locationRegexp, 'Location must be in format City, Region'),\n  phone: yup\n    .string()\n    .max(13, 'Pnone number must contain 12 numbers')\n    .matches(phoneRegexp, 'Mobile phone must be in format +380xxxxxxxxx'),\n});\n\nexport const loginSchema = yup.object().shape({\n  email: yup\n    .string()\n    .min(10, 'Email should be 10 characters minimum.')\n    .max(63, 'Email should be 63 characters maximum.')\n    .matches(emailRegexp, 'Email must be in format mail@mail.com')\n    .required('Email is required'),\n  password: yup\n    .string()\n    .required('Password is required')\n    .min(7, 'Password should be 7 characters minimum.')\n    .max(32, 'Password should be 32 characters maximum.')\n    .matches(passwordRegexp, 'Whitespace is not allowed'),\n});\n"],"names":["BackgroundWrapper","styled","prop","theme","colors","background","authBackgroundMobile","up","authBackgroundTablet","authBackgroundDesktop","FirstStep","autoComplete","type","name","placeholder","component","SecondStep","StepSwitcher","page","RegisterForm","useState","setPage","dispatch","useDispatch","initialValues","email","password","confirmPassword","location","phone","validationSchema","registerSchema","onSubmit","values","resetForm","newUser","console","log","data","register","login","payload","onClick","to","emailRegexp","passwordRegexp","yup","shape","matches","min","max","required","oneOf","loginSchema"],"sourceRoot":""}