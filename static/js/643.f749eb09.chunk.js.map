{"version":3,"file":"static/js/643.f749eb09.chunk.js","mappings":"mOAOaA,EAAY,WACvB,IAKMC,GAAWC,EAAAA,EAAAA,MAgBjB,OACE,4BACE,mCACA,SAAC,KAAD,CACEC,cAzBgB,CACpBC,MAAO,GACPC,SAAU,IAwBNC,iBAAkBC,EAAAA,EAClBC,SApBe,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UACxBC,EAAO,CACXP,MAAOK,EAAOL,MACdC,SAAUI,EAAOJ,UAEnBO,QAAQC,IAAIF,GACZ,IAAMG,EAAOb,GAASc,EAAAA,EAAAA,IAAMJ,IACV,yBAAdG,EAAKE,MACPN,IAEGI,EAAKG,SACRL,QAAQC,IAAI,0CAEf,EAIG,UAKE,UAAC,KAAD,YACE,8BACE,SAAC,KAAD,CAAOG,KAAK,QAAQE,KAAK,QAAQC,YAAY,WAC7C,SAAC,KAAD,CAAcD,KAAK,QAAQE,UAAU,aAEvC,8BACE,SAAC,KAAD,CACEJ,KAAK,WACLE,KAAK,WACLC,YAAY,cAEd,SAAC,KAAD,CAAcD,KAAK,WAAWE,UAAU,aAE1C,mBAAQJ,KAAK,SAAb,oBACA,oDACyB,SAAC,KAAD,CAAMK,GAAG,YAAT,gCAMlC,EChDD,EARkB,WAChB,OACE,0BACE,SAACrB,EAAD,KAGL,C,4FCNKsB,EAAc,gCACdC,EAAiB,QAMVC,EAAiBC,EAAAA,KAAaC,MAAM,CAC/CtB,MAAOqB,EAAAA,KAEJE,QAAQL,EAAa,yCACrBM,SAAS,qBACZvB,SAAUoB,EAAAA,KAEPG,SAAS,wBACTC,IAAI,EAAG,4CACPC,IAAI,GAAI,6CACRH,QAAQJ,EAAgB,6BAC3BQ,gBAAiBN,EAAAA,KAEdO,MAAM,CAACP,EAAAA,GAAQ,YAAa,MAAO,uBACnCG,SAAS,gCACZV,KAAMO,EAAAA,KAAaE,QApBF,wDAoBsB,kCACvCM,SAAUR,EAAAA,KAEPE,QApBH,0DAoB2B,2CAC3BO,MAAOT,EAAAA,KAEJK,IAAI,GAAI,wCACRH,QA1Be,8BA0BM,kDAGbpB,EAAckB,EAAAA,KAAaC,MAAM,CAC5CtB,MAAOqB,EAAAA,KAEJE,QAAQL,EAAa,yCACrBM,SAAS,qBACZvB,SAAUoB,EAAAA,KAEPG,SAAS,wBACTC,IAAI,EAAG,4CACPC,IAAI,GAAI,6CACRH,QAAQJ,EAAgB,8B","sources":["components/LoginForm/LoginForm.jsx","pages/LoginPage/LoginPage.jsx","schemas/authValidationSchemas.js"],"sourcesContent":["import { Formik, Form, Field, ErrorMessage } from 'formik';\nimport { Link } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\n\nimport { loginSchema } from '../../schemas/authValidationSchemas';\nimport { login } from 'redux/auth/authOperations';\n\nexport const LoginForm = () => {\n  const initialValues = {\n    email: '',\n    password: '',\n  };\n\n  const dispatch = useDispatch();\n\n  const handleSubmit = (values, { resetForm }) => {\n    const user = {\n      email: values.email,\n      password: values.password,\n    };\n    console.log(user);\n    const data = dispatch(login(user));\n    if (data.type === 'auth/login/fulfilled') {\n      resetForm();\n    }\n    if (!data.payload) {\n      console.log('Something wrong, please try again later');\n    }\n  };\n  return (\n    <div>\n      <h2>Login</h2>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={loginSchema}\n        onSubmit={handleSubmit}\n      >\n        <Form>\n          <label>\n            <Field type=\"email\" name=\"email\" placeholder=\"Email\"></Field>\n            <ErrorMessage name=\"email\" component=\"span\"></ErrorMessage>\n          </label>\n          <label>\n            <Field\n              type=\"password\"\n              name=\"password\"\n              placeholder=\"Password\"\n            ></Field>\n            <ErrorMessage name=\"password\" component=\"span\"></ErrorMessage>\n          </label>\n          <button type=\"submit\">Login</button>\n          <p>\n            Don't have an account? <Link to=\"/register\">Register</Link>\n          </p>\n        </Form>\n      </Formik>\n    </div>\n  );\n};\n","import { LoginForm } from 'components/LoginForm/LoginForm';\n\nconst LoginPage = () => {\n  return (\n    <div>\n      <LoginForm />\n    </div>\n  );\n};\n\nexport default LoginPage;\n","import * as yup from 'yup';\n\nconst emailRegexp = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]{2,}$/;\nconst passwordRegexp = /^\\S*$/;\nconst nameRegexp = /^([a-zA-Zа-яА-ЯёЁ\\s]+)$/;\nconst phoneRegexp = /^\\+380\\d{3}\\d{2}\\d{2}\\d{2}$/;\nconst locationRegexp =\n  /^(?:(?:\\w+-\\w+)+|(?:\\w+)+),\\s(?:(?:\\w+-\\w+)+|(?:\\w+)+)$/;\n\nexport const registerSchema = yup.object().shape({\n  email: yup\n    .string()\n    .matches(emailRegexp, 'Email must be in format mail@mail.com')\n    .required('Email is required'),\n  password: yup\n    .string()\n    .required('Password is required')\n    .min(7, 'Password should be 7 characters minimum.')\n    .max(32, 'Password should be 32 characters maximum.')\n    .matches(passwordRegexp, 'Whitespace is not allowed'),\n  confirmPassword: yup\n    .string()\n    .oneOf([yup.ref('password'), null], 'Password must match')\n    .required('Confirm password is required'),\n  name: yup.string().matches(nameRegexp, 'Name must contain only letters'),\n  location: yup\n    .string()\n    .matches(locationRegexp, 'Location must be in format City, Region'),\n  phone: yup\n    .string()\n    .max(13, 'Pnone number must contain 12 numbers')\n    .matches(phoneRegexp, 'Mobile phone must be in format +380xxxxxxxxx'),\n});\n\nexport const loginSchema = yup.object().shape({\n  email: yup\n    .string()\n    .matches(emailRegexp, 'Email must be in format mail@mail.com')\n    .required('Email is required'),\n  password: yup\n    .string()\n    .required('Password is required')\n    .min(7, 'Password should be 7 characters minimum.')\n    .max(32, 'Password should be 32 characters maximum.')\n    .matches(passwordRegexp, 'Whitespace is not allowed'),\n});\n"],"names":["LoginForm","dispatch","useDispatch","initialValues","email","password","validationSchema","loginSchema","onSubmit","values","resetForm","user","console","log","data","login","type","payload","name","placeholder","component","to","emailRegexp","passwordRegexp","registerSchema","yup","shape","matches","required","min","max","confirmPassword","oneOf","location","phone"],"sourceRoot":""}